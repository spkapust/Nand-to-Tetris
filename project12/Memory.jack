// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram, heap;
    static int freeList;

    /** Initializes the class. */
    function void init() {
	let ram = 0;
	let freeList = 2048;
	let heap = 2048;
	let heap[0] = 0;
	let heap[1] = 14334;
	return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
	return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
	let ram[address] = value;
	return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
	var int current, prev;
	let current = freeList;

	while( ram[current + 1] < (size + 2) ){
		let prev = current;
		let current = ram[current];
	}

	let ram[current+1] = ram[current+1] - (size + 2);
	if (ram[current+1] = 0) {
		if(current = freeList){let freeList = ram[current];}
		else{let ram[prev] = ram[current];}
		
	}
	
	let ram[current + 2 + ram[current+1]] = 0;
	let ram[current + 2 + ram[current+1] + 1] = size;

	return (current + 2 + ram[current+1] + 2);
	
	 
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
	var int current;
	let current = freeList;
	while( ram[current] > 0 ){
		let current = ram[current];
	}
	let ram[current] = o - 2;
	return;
    }    
}
